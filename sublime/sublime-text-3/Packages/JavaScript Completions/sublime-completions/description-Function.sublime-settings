{"scope":"source.js","completions":[["description-bind\tFunction",{"name":"bind","return_type":"any","parameters":[{"name":"thisArg","type":"any","is_optional":false,"description":""},{"name":"args...","type":"any","is_optional":false,"description":""}],"description":"15.3.4.5 Function.prototype.bind\r\n            (thisArg [, arg1 [, arg2, …]])\r\n\r\n        The bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc,\r\n        and returns a new function object by performing the following steps:\r\n\r\n        \r\n          Let Target be the this value.\r\n          If IsCallable(Target) is false, throw a TypeError exception.\r\n          Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg\r\n              (arg1, arg2 etc), in order.\r\n          Let F be a new native ECMAScript object .\r\n          Set all the internal methods, except for [[Get]], of F as specified in 8.12.\r\n          Set the [[Get]] internal property of F as specified in 15.3.5.4.\r\n          Set the [[TargetFunction]] internal property of F to Target.\r\n          Set the [[BoundThis]] internal property of F to the value of thisArg.\r\n          Set the [[BoundArgs]] internal property of F to A.\r\n          Set the [[Class]] internal property of F to \"Function\".\r\n          Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified\r\n              in 15.3.3.1.\r\n          Set the [[Call]] internal property of F as described in 15.3.4.5.1.\r\n          Set the [[Construct]] internal property of F as described in 15.3.4.5.2.\r\n          Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.\r\n          If the [[Class]] internal property of Target is \"Function\", then\r\n            \r\n              Let L be the length property of Target minus the length of A.\r\n              Set the length own property of F to either 0 or L, whichever is larger.\r\n            \r\n          \r\n          Else set the length own property of F to 0.\r\n          Set the  attributes of the length own property of F  to the values specified in 15.3.5.1.\r\n          Set the [[Extensible]] internal property of F to true.\r\n          Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor\r\n              {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\r\n              and false.\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\",\r\n              PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false,\r\n              [[Configurable]]: false}, and false.\r\n          Return F.\r\n        \r\n\r\n        The length property of the bind method is 1.\r\n\r\n        \r\n          NOTE Function objects created using Function.prototype.bind do not have a\r\n          prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties.\r\n        \r\n\r\n        \r\n          15.3.4.5.1 [[Call]]\r\n\r\n          When the [[Call]] internal method of a function object, F, which was created using the bind function is\r\n          called with a this value and a list of arguments ExtraArgs, the following steps are\r\n          taken:\r\n\r\n          \r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let boundThis be the value of F’s [[BoundThis]] internal property.\r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of  calling the [[Call]] internal method of target providing boundThis as the\r\n                this value and providing args as the arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.2 [[Construct]]\r\n\r\n          When the [[Construct]] internal method of a function object, F that was created using the bind function is\r\n          called with a list of arguments ExtraArgs, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[Construct]] internal method, a TypeError exception is thrown.\r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of calling the [[Construct]] internal method of target providing args as the\r\n                arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.3 [[HasInstance]]\r\n              (V)\r\n\r\n          When the [[HasInstance]] internal method of a function object F, that was created using the bind function\r\n          is called with argument V, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[HasInstance]] internal method, a TypeError exception is thrown.\r\n            Return the result of calling the [[HasInstance]] internal method of target providing V as the\r\n                argument.","is_static":false,"type":"operation","url_doc":"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.5","full_description":"/*\n\n\tFunction\n\n\tbind ( thisArg: any, args...: any )\n\n\tReturn Type:\n\tany\n\n\tDescription:\n\t15.3.4.5 Function.prototype.bind\r\n            (thisArg [, arg1 [, arg2, …]])\r\n\r\n        The bind method takes one or more arguments, thisArg and (optionally) arg1, arg2, etc,\r\n        and returns a new function object by performing the following steps:\r\n\r\n        \r\n          Let Target be the this value.\r\n          If IsCallable(Target) is false, throw a TypeError exception.\r\n          Let A be a new (possibly empty) internal list of all of the argument values provided after thisArg\r\n              (arg1, arg2 etc), in order.\r\n          Let F be a new native ECMAScript object .\r\n          Set all the internal methods, except for [[Get]], of F as specified in 8.12.\r\n          Set the [[Get]] internal property of F as specified in 15.3.5.4.\r\n          Set the [[TargetFunction]] internal property of F to Target.\r\n          Set the [[BoundThis]] internal property of F to the value of thisArg.\r\n          Set the [[BoundArgs]] internal property of F to A.\r\n          Set the [[Class]] internal property of F to \"Function\".\r\n          Set the [[Prototype]] internal property of F to the standard built-in Function prototype object as specified\r\n              in 15.3.3.1.\r\n          Set the [[Call]] internal property of F as described in 15.3.4.5.1.\r\n          Set the [[Construct]] internal property of F as described in 15.3.4.5.2.\r\n          Set the [[HasInstance]] internal property of F as described in 15.3.4.5.3.\r\n          If the [[Class]] internal property of Target is \"Function\", then\r\n            \r\n              Let L be the length property of Target minus the length of A.\r\n              Set the length own property of F to either 0 or L, whichever is larger.\r\n            \r\n          \r\n          Else set the length own property of F to 0.\r\n          Set the  attributes of the length own property of F  to the values specified in 15.3.5.1.\r\n          Set the [[Extensible]] internal property of F to true.\r\n          Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"caller\", PropertyDescriptor\r\n              {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\r\n              and false.\r\n          Call the [[DefineOwnProperty]] internal method of F with arguments \"arguments\",\r\n              PropertyDescriptor {[[Get]]: thrower, [[Set]]: thrower, [[Enumerable]]: false,\r\n              [[Configurable]]: false}, and false.\r\n          Return F.\r\n        \r\n\r\n        The length property of the bind method is 1.\r\n\r\n        \r\n          NOTE Function objects created using Function.prototype.bind do not have a\r\n          prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties.\r\n        \r\n\r\n        \r\n          15.3.4.5.1 [[Call]]\r\n\r\n          When the [[Call]] internal method of a function object, F, which was created using the bind function is\r\n          called with a this value and a list of arguments ExtraArgs, the following steps are\r\n          taken:\r\n\r\n          \r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let boundThis be the value of F’s [[BoundThis]] internal property.\r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of  calling the [[Call]] internal method of target providing boundThis as the\r\n                this value and providing args as the arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.2 [[Construct]]\r\n\r\n          When the [[Construct]] internal method of a function object, F that was created using the bind function is\r\n          called with a list of arguments ExtraArgs, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[Construct]] internal method, a TypeError exception is thrown.\r\n            Let boundArgs be the value of F’s [[BoundArgs]] internal property.\r\n            Let args be a new list containing the same values as the list boundArgs in the same order followed\r\n                by the same values as the list ExtraArgs in the same order.\r\n            Return the result of calling the [[Construct]] internal method of target providing args as the\r\n                arguments.\r\n          \r\n        \r\n\r\n        \r\n          15.3.4.5.3 [[HasInstance]]\r\n              (V)\r\n\r\n          When the [[HasInstance]] internal method of a function object F, that was created using the bind function\r\n          is called with argument V, the following steps are taken:\r\n\r\n          \r\n            Let target be the value of F’s [[TargetFunction]] internal property.\r\n            If target has no [[HasInstance]] internal method, a TypeError exception is thrown.\r\n            Return the result of calling the [[HasInstance]] internal method of target providing V as the\r\n                argument.\n\n\tURL doc:\n\thttp://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.5\n\n*/"}],["description-apply\tFunction",{"name":"apply","return_type":"any","parameters":[{"name":"thisArg","type":"any","is_optional":false,"description":""},{"name":"argArray","type":"Array","is_optional":false,"description":""}],"description":"15.3.4.3 Function.prototype.apply\r\n            (thisArg, argArray)\r\n\r\n        When the apply method is called on an object func with arguments thisArg and\r\n        argArray, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          If argArray is null or undefined, then\r\n            \r\n              Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n                  this value and an empty list of arguments.\r\n            \r\n          \r\n          If Type(argArray) is not Object, then throw a TypeError exception.\r\n          Let len be the result of calling the [[Get]] internal method of argArray with argument\r\n              \"length\".\r\n          Let n be ToUint32(len).\r\n          Let argList  be an empty List.\r\n          Let index be 0.\r\n          Repeat while index < n\r\n            \r\n              Let indexName be ToString(index).\r\n              Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName\r\n                  as the argument.\r\n              Append nextArg as the last element of argList.\r\n              Set index to index + 1.\r\n            \r\n          \r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the apply method is 2.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.","is_static":false,"type":"operation","url_doc":"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3","full_description":"/*\n\n\tFunction\n\n\tapply ( thisArg: any, argArray: Array )\n\n\tReturn Type:\n\tany\n\n\tDescription:\n\t15.3.4.3 Function.prototype.apply\r\n            (thisArg, argArray)\r\n\r\n        When the apply method is called on an object func with arguments thisArg and\r\n        argArray, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          If argArray is null or undefined, then\r\n            \r\n              Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n                  this value and an empty list of arguments.\r\n            \r\n          \r\n          If Type(argArray) is not Object, then throw a TypeError exception.\r\n          Let len be the result of calling the [[Get]] internal method of argArray with argument\r\n              \"length\".\r\n          Let n be ToUint32(len).\r\n          Let argList  be an empty List.\r\n          Let index be 0.\r\n          Repeat while index < n\r\n            \r\n              Let indexName be ToString(index).\r\n              Let nextArg be the result of calling the [[Get]] internal method of argArray with indexName\r\n                  as the argument.\r\n              Append nextArg as the last element of argList.\r\n              Set index to index + 1.\r\n            \r\n          \r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the apply method is 2.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.\n\n\tURL doc:\n\thttp://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3\n\n*/"}],["description-call\tFunction",{"name":"call","return_type":"any","parameters":[{"name":"thisArg","type":"any","is_optional":false,"description":""},{"name":"args...","type":"any","is_optional":false,"description":""}],"description":"15.3.4.4 Function.prototype.call\r\n            (thisArg [ , arg1 [ , arg2, … ] ] )\r\n\r\n        When the call method is called on an object func with argument thisArg and optional\r\n        arguments arg1, arg2 etc, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          Let argList be an empty List.\r\n          If this method was called with more than one argument then in left to right order starting with arg1 append\r\n              each argument as the last element of argList\r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the call method is 1.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.","is_static":false,"type":"operation","url_doc":"http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.4","full_description":"/*\n\n\tFunction\n\n\tcall ( thisArg: any, args...: any )\n\n\tReturn Type:\n\tany\n\n\tDescription:\n\t15.3.4.4 Function.prototype.call\r\n            (thisArg [ , arg1 [ , arg2, … ] ] )\r\n\r\n        When the call method is called on an object func with argument thisArg and optional\r\n        arguments arg1, arg2 etc, the following steps are taken:\r\n\r\n        \r\n          If IsCallable(func) is false, then throw a TypeError exception.\r\n          Let argList be an empty List.\r\n          If this method was called with more than one argument then in left to right order starting with arg1 append\r\n              each argument as the last element of argList\r\n          Return the result of calling the [[Call]] internal method of func, providing thisArg as the\r\n              this value and argList as the list of arguments.\r\n        \r\n\r\n        The length property of the call method is 1.\r\n\r\n        \r\n          NOTE The thisArg value is passed without modification as the this value. This is a\r\n          change from Edition 3, where a undefined or null thisArg is replaced with the global object and ToObject is applied to all other values and that result is passed as the this value.\n\n\tURL doc:\n\thttp://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.4\n\n*/"}],["description-length\tFunction",{"name":"length","return_type":"int","description":"The value of the length property is an integer that indicates the “typical” number of arguments expected by the function. However, the language permits the function to be invoked with some other number of arguments. The behaviour of a function when invoked on a number of arguments other than the number specified by its length property depends on the function.","is_static":false,"type":"property","url_doc":"http://html5index.org/ECMAScript%20-%20Function.html#length","full_description":"/*\n\n\tFunction\n\n\tlength\n\n\tReturn Type:\n\tint\n\n\tDescription:\n\tThe value of the length property is an integer that indicates the “typical” number of arguments expected by the function. However, the language permits the function to be invoked with some other number of arguments. The behaviour of a function when invoked on a number of arguments other than the number specified by its length property depends on the function.\n\n\tURL doc:\n\thttp://html5index.org/ECMAScript%20-%20Function.html#length\n\n*/"}],["description-toString\tFunction",{"name":"toString","return_type":"string","parameters":[],"description":"An implementation-dependent representation of the function is returned. This representation has the syntax of a FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and semicolons within the representation String is implementation-dependent.","is_static":false,"type":"operation","url_doc":"http://html5index.org/ECMAScript%20-%20Function.html#toString","full_description":"/*\n\n\tFunction\n\n\ttoString ()\n\n\tReturn Type:\n\tstring\n\n\tDescription:\n\tAn implementation-dependent representation of the function is returned. This representation has the syntax of a FunctionDeclaration. Note in particular that the use and placement of white space, line terminators, and semicolons within the representation String is implementation-dependent.\n\n\tURL doc:\n\thttp://html5index.org/ECMAScript%20-%20Function.html#toString\n\n*/"}],["description-Function\tFunction",{"name":"Function","return_type":"Function","parameters":[{"name":"paramsAndBody...","type":"string","is_optional":false,"description":""}],"description":"","type":"constructor","url_doc":"http://html5index.org/ECMAScript%20-%20Function.html#Function","full_description":"/*\n\n\tFunction\n\n\tFunction ( paramsAndBody...: string )\n\n\tReturn Type:\n\tFunction\n\n\tDescription:\n\t\n\n\tURL doc:\n\thttp://html5index.org/ECMAScript%20-%20Function.html#Function\n\n*/"}]]}
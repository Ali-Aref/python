{"scope":"source.js","completions":[["compareBoundaryPoints\t( how: unsigned short, sourceRange: Range ): short Range","compareBoundaryPoints(${1:how: unsigned short}, ${2:sourceRange: Range})"],["isPointInRange\t( node: Node, offset: unsigned long ): boolean Range","isPointInRange(${1:node: Node}, ${2:offset: unsigned long})"],["comparePoint\t( node: Node, offset: unsigned long ): short Range","comparePoint(${1:node: Node}, ${2:offset: unsigned long})"],["setStart\t( node: Node, offset: unsigned long ): void Range","setStart(${1:node: Node}, ${2:offset: unsigned long})"],["setEnd\t( node: Node, offset: unsigned long ): void Range","setEnd(${1:node: Node}, ${2:offset: unsigned long})"],["surroundContents\t( newParent: Node ): void Range","surroundContents(${1:newParent: Node})"],["selectNodeContents\t( node: Node ): void Range","selectNodeContents(${1:node: Node})"],["intersectsNode\t( node: Node ): boolean Range","intersectsNode(${1:node: Node})"],["START_TO_START\t: const unsigned short Range","START_TO_START"],["extractContents\t(): DocumentFragment Range","extractContents()"],["collapse\t( toStart?: boolean ): void Range","collapse(${1:toStart?: boolean})"],["END_TO_START\t: const unsigned short Range","END_TO_START"],["START_TO_END\t: const unsigned short Range","START_TO_END"],["setStartBefore\t( node: Node ): void Range","setStartBefore(${1:node: Node})"],["cloneContents\t(): DocumentFragment Range","cloneContents()"],["setStartAfter\t( node: Node ): void Range","setStartAfter(${1:node: Node})"],["END_TO_END\t: const unsigned short Range","END_TO_END"],["setEndBefore\t( node: Node ): void Range","setEndBefore(${1:node: Node})"],["setEndAfter\t( node: Node ): void Range","setEndAfter(${1:node: Node})"],["selectNode\t( node: Node ): void Range","selectNode(${1:node: Node})"],["insertNode\t( node: Node ): void Range","insertNode(${1:node: Node})"],["commonAncestorContainer\t: Node Range","commonAncestorContainer"],["startOffset\t: unsigned long Range","startOffset"],["endOffset\t: unsigned long Range","endOffset"],["deleteContents\t(): void Range","deleteContents()"],["startContainer\t: Node Range","startContainer"],["cloneRange\t(): Range Range","cloneRange()"],["collapsed\t: boolean Range","collapsed"],["Range\t(): Range Range","new Range()"],["endContainer\t: Node Range","endContainer"],["detach\t(): void Range","detach()"],["Range\t(): Range Range","Range()"]]}
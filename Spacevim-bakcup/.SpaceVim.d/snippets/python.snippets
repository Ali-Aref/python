"""
Copyright (c) 2021 Ali Aref

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
"""


# Model Fields

snippet mauto
	${1:FIELDNAME} = models.AutoField(${0})
snippet mbigint
	${1:FIELDNAME} = models.BigIntegerField(${0})
snippet mbinary
	${1:FIELDNAME} = models.BinaryField(${0})
snippet mbool
	${1:FIELDNAME} = models.BooleanField(${0:default=True})
snippet mchar
	${1:FIELDNAME} = models.CharField(max_length=${2}${0:, blank=True})
snippet mcomma
	${1:FIELDNAME} = models.CommaSeparatedIntegerField(max_length=${2}${0:, blank=True})
snippet mdate
	${1:FIELDNAME} = models.DateField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet mdatetime
	${1:FIELDNAME} = models.DateTimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet mdecimal
	${1:FIELDNAME} = models.DecimalField(max_digits=${2}, decimal_places=${0})
snippet memail
	${1:FIELDNAME} = models.EmailField(max_length=${2:75}${0:, blank=True})
snippet mfile
	${1:FIELDNAME} = models.FileField(upload_to=${2:path/for/upload}${0:, max_length=100})
snippet mfilepath
	${1:FIELDNAME} = models.FilePathField(path=${2:"/abs/path/to/dir"}${3:, max_length=100}${4:, match="*.ext"}${5:, recursive=True}${0:, blank=True, })
snippet mfloat
	${1:FIELDNAME} = models.FloatField(${0})
snippet mimage
	${1:FIELDNAME} = models.ImageField(upload_to=${2:path/for/upload}${3:, height_field=height, width_field=width}${0:, max_length=100})
snippet mint
	${1:FIELDNAME} = models.IntegerField(${0})
snippet mip
	${1:FIELDNAME} = models.IPAddressField(${0})
snippet mnullbool
	${1:FIELDNAME} = models.NullBooleanField(${0})
snippet mposint
	${1:FIELDNAME} = models.PositiveIntegerField(${0})
snippet mpossmallint
	${1:FIELDNAME} = models.PositiveSmallIntegerField(${0})
snippet mslug
	${1:FIELDNAME} = models.SlugField(max_length=${2:50}${0:, blank=True})
snippet msmallint
	${1:FIELDNAME} = models.SmallIntegerField(${0})
snippet mtext
	${1:FIELDNAME} = models.TextField(${0:blank=True})
snippet mtime
	${1:FIELDNAME} = models.TimeField(${2:auto_now_add=True, auto_now=True}${0:, blank=True, null=True})
snippet murl
	${1:FIELDNAME} = models.URLField(${2:verify_exists=False}${3:, max_length=200}${0:, blank=True})
snippet mxml
	${1:FIELDNAME} = models.XMLField(schema_path=${2:None}${0:, blank=True})
# Relational Fields
snippet fk
	${1:FIELDNAME} = models.ForeignKey(${2:OtherModel}, related_name="${3:RelatedName}", ${4:, limit_choices_to=})
snippet m2m
	${1:FIELDNAME} = models.ManyToManyField(${2:OtherModel}${3:, related_name=''}${4:, limit_choices_to=}${5:, symmetrical=False}${6:, through=''}${0:, db_table=''})
snippet o2o
	${1:FIELDNAME} = models.OneToOneField(${2:OtherModel}${3:, parent_link=True}${4:, related_name=''}${5:, limit_choices_to=}${0:, to_field=''})


# Form Fields

snippet fbool
	${1:FIELDNAME} = forms.BooleanField(${2})
snippet fchar
	${1:FIELDNAME} = forms.CharField(${2})
snippet fchoice
	${1:FIELDNAME} = forms.ChoiceField(${2})
snippet fcombo
	${1:FIELDNAME} = forms.ComboField(${2})
snippet fdate
	${1:FIELDNAME} = forms.DateField(${2})
snippet fdatetime
	${1:FIELDNAME} = forms.DateTime(${2})
snippet fdecimal
	${1:FIELDNAME} = forms.DecimalField(${2})
snippet fduration
	${1:FIELDNAME} = forms.DurationField(${2})
snippet femail
	${1:FIELDNAME} = forms.EmailField(${2})
snippet ffile
	${1:FIELDNAME} = forms.FileField(${2})
snippet ffilepath
	${1:FIELDNAME} = forms.FilePathField(${2})
snippet ffloat
	${1:FIELDNAME} = forms.FloatField(${2})
snippet fgip
	${1:FIELDNAME} = forms.GenericIPAddressField(${2})
snippet fimg
	${1:FIELDNAME} = forms.ImageField(${2})
snippet fint
	${1:FIELDNAME} = forms.IntegerField(${2})
snippet fip
	${1:FIELDNAME} = forms.IPAddressField(${2})
snippet fmochoice
	${1:FIELDNAME} = forms.ModelChoiceField(${2})
snippet fmomuchoice
	${1:FIELDNAME} = forms.ModelMultipleChoiceField(${2})
snippet fmuchoice
	${1:FIELDNAME} = forms.MultipleChoiceField(${2})
snippet fmuval
	${1:FIELDNAME} = forms.MultipleValueField(${2})
snippet fnullbool
	${1:FIELDNAME} = forms.NullBooleanField(${2})
snippet fregex
	${1:FIELDNAME} = forms.RegexField(${2})
snippet fslug
	${1:FIELDNAME} = forms.SlugField(${2})
snippet fsdatetime
	${1:FIELDNAME} = forms.SplitDateTime(${2})
snippet ftime
	${1:FIELDNAME} = forms.TimeField(${2})
snippet ftchoice
	${1:FIELDNAME} = forms.TypedChoiceField(${2})
snippet ftmuchoice
	${1:FIELDNAME} = forms.TypedMultipleChoiceField(${2})
snippet furl
	${1:FIELDNAME} = forms.URLField(${2})
snippet fuuid
	${1:FIELDNAME} = forms.UUIDField(${2})



#---------------- Snippets for Django FORMS  ---------------------#

snippet form
	class ${1:FormName}(forms.Form):
		"""${2:TODO: Define fields here}"""
		${0}

snippet modelform
	class ${1:ModelName}Form(forms.ModelForm):
	    class Meta:
	        model = $1
			fields = ("${2:__all__}")
		${0}	


#---------------- Snippets for Django Models  ---------------------#

snippet model
	class ${1:ModelName}(models.Model):
		# ${2:TODO: Define fields here}
		${3}

		class Meta:
			verbose_name = "${4:$1}"
			verbose_name_plural = "${5:$1s}"
			ordering = [${6:'-pk'}]

		def __str__(self):
			return ${7:super($1, self).__str__()}

		def save(self, *args, **kwargs):
			return ${8:super($1, self).save(*args, **kwargs)}

		def get_absolute_url(self):
			return reverse('${9:view_or_url_name}', kwargs={${10:'pk'}: ${11: self.pk}})

		# TODO: Define custom methods here
		${10} 



#----------------  Snippets for Django Views  ---------------------#

snippet init
	def __init__(self, *args, **kwargs):
	    super(self.__class__, self).__init__(*args, **kwargs)
    ${0}

snippet getcontextdata
	def get_context_data(self, *args, **kwargs):
	    context = super(self.__class__, self).get_context_data(*args, **kwargs)
	    return context
	${0}

snippet getsuccessurl
	def get_success_url(self):
        return reverse("${1:VIEW_NAME}", kwargs={${2:"pk", self.get_object().pk}})
	${0}

snippet getqueryset
	def get_queryset(self):
		return ${1:ObjectName}.objects.filter(${2})
	${0}

snippet getobject
	def get_object(self):
		return ${1:ObjectName}.objects.get(${2})
	${0}

snippet formvalid
	def form_valid(self, form):
		return super(self.__class__, self).form_valid(form)
	${0}

snippet forminvalid
	def form_invalid(self, form):
		return super(self.__class__, self).form_invalid(form)
	${0}

snippet dispatch
	def dispatch(self, request, *args, **kwargs):
	    return super(self.__class__, self).dispatch(request, *args, **kwargs)
	${0}

snippet r2r
	return render_to_response('${1:template.html}', {
			${2}
		}${0:, context_instance=RequestContext(request)}
	)



snippet createview
	class ${1:ModelName}CreateView(generic.CreateView):
	    model = ${2: $1}
	    template_name = "${3:$1/$1_form.html}"
	    ${0}

snippet updateview
	class ${1:ModelName}UpdateView(generic.UpdateView):
	    model = ${2: $1}
	    template_name = "${3:$1/$1_form.html}"

		def get_object(self):
			return $1.objects.get(pk=${4:self.kwargs.get("pk")})
		${0}

snippet deleteview
	class ${1:ModelName}DeleteView(generic.DeleteView):
	    model = ${2: $1}
		
		def get_success_url(self):
	        return reverse("${3:$1:list}")

		def get(self, request, *args, **kwargs):
	        return self.post(request, *args, **kwargs)
	    ${0}

snippet detailsview
	class ${1:ModelName}DetailsView(generic.UpdateView):
	    model = ${2: $1}
	    template_name = "${3:$1/$1_detail.html}"

		def get_object(self):
			return $1.objects.get(pk=${4:self.kwargs.get("pk")})
		${0}

snippet listview
	class ${1:ModelName}ListView(generic.ListView):
	    model = ${2: $1}
	    template_name = "${3:$1/$1_list.html}"

		def get_queryset(self):
			return $1.objects.filter(${4})
		${0}

snippet templateview
	class ${1:ClassName}TemplateView(generic.TemplateView):
	    template_name = "${2:TEMPLATE_NAME}"
		${0}

snippet adminview
	@admin.register($1)
	class ${1:ModelName}Admin(admin.ModelAdmin):
		list_display = ${2:"FIELDS"}
		search_fields = ${3:"SEARCH-FIELDS"}
		list_filter = ${4:"FILTER-FIELDS"}
		${0}

snippet tabularinline
	class ${1:ModelName}Inline(admin.TabularInline):
		model = ${2:$1}
		min_num = ${3:3}
	    max_num = ${4:20}
	    extra = ${5:1}

snippet stackedinline
	class ${1:ModelName}Inline(admin.StackedInline):
		model = ${2:$1}
		min_num = ${3:3}
	    max_num = ${4:20}
	    extra = ${5:1}

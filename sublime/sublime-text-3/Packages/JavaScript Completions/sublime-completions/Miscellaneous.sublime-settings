{
  "scope":"source.js",
  "completions":[
    [
      "ajax_request",
      "var ajax = new XMLHttpRequest();\najax.onreadystatechange = function() {\n\tif (ajax.readyState == 4 && ajax.status == 200) {\n\t\t${1:var response = ajax.responseText;}\n\t}\n};\najax.open(${2:method}, ${3:URL}, ${4:true});\najax.setRequestHeader(\"Content-type\", ${5:\"application/json\"});\najax.send(${6:data});"
    ],
    [
      "switch",
      "switch (${1:expression}) {\n\tcase ${2:label_1}:\n\t\t${3:// statements_1}\n\t\tbreak;\n\tdefault:\n\t\t${4:// statements_def}\n\t\tbreak;\n}"
    ],
    [
      "try_catch_finally",
      "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n} finally {\n\t${3:// statements}\n}"
    ],
    [
      "try_catch",
      "try {\n\t${1:// statements}\n} catch(e) {\n\t${2:// statements}\n\tconsole.log(e);\n}"
    ],
    [
      "if_else",
      "if (${1:condition}) {\n\t${2:// statement}\n} else {\n\t${3:// statement}\n}"
    ],
    [
      "prototype",
      "${1:class_name}.prototype.${2:method_name} = function(${3:argument}){\n\t${4:// body... }\n};"
    ],
    [
      "forEach",
      "${1:array}.forEach( function(${2:element}, ${3:index}) {\n\t${4:// statements}\n});"
    ],
    [
      "function_with_name",
      "function ${1:function_name} (${2:argument}) {\n\t${3:// body... }\n}"
    ],
    [
      "for",
      "for(var i = 0, length1 = ${1:array}.length; i < length1; i++){\n\t${1:array}[i]${2:}\n}"
    ],
    [
      "for-k",
      "for(var k = 0, length3 = ${1:array}.length; k < length3; k++){\n\t${1:array}[k]${2:}\n}"
    ],
    [
      "for-j",
      "for(var j = 0, length2 = ${1:array}.length; j < length2; j++){\n\t${1:array}[j]${2:}\n}"
    ],
    [
      "function_without_name",
      "function (${1:argument}) {\n\t${2:/* body... */}\n}"
    ],
    [
      "for_of",
      "for (${1:variable} of ${2:object}) {\n\t${0:// statement}\n}"
    ],
    [
      "for_in",
      "for (${1:variable} in ${2:object}) {\n\t${0:// statement}\n}"
    ],
    [
      "do_while",
      "do{\n\t// statement\n} while (${1:condition});"
    ],
    [
      "while",
      "while (${1:condition}) {\n\t${2:// statement}\n}"
    ],
    [
      "if",
      "if (${1:condition}) {\n\t${2:// statement}\n}"
    ],
    [
      "anonymous_function",
      ";(function(){\n\t$1\n})();"
    ],
    [
      "else_if",
      "else if (${1:condition}) {\n\t\n}"
    ],
    [
      "conditional_operator",
      "(${1:condition}) ? ${2:val1} : ${3:val2};"
    ],
    [
      "else",
      "else {\n\t$1\n}"
    ],
    [
      "FormData\t(${1:form})",
      "new FormData(${1:form})"
    ],
    [
      "console_log",
      "console.log(${1:''})"
    ],
    [
      "Option",
      "new Option()"
    ],
    [
      "Image",
      "new Image()"
    ],
    [
      "void",
      "void(${1:''})"
    ],
    [
      "continue",
      "continue;"
    ],
    [
      "throw",
      "throw $1"
    ],
    [
      "const",
      "const"
    ],
    [
      "break",
      "break;"
    ],
    [
      "return",
      "return"
    ],
    [
      "false",
      "false"
    ],
    [
      "let",
      "let"
    ],
    [
      "null",
      "null"
    ],
    [
      "true",
      "true"
    ],
    [
      "var",
      "var"
    ]
  ]
}
